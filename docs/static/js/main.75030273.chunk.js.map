{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifts.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","className","type","value","onChange","target","prototype","PropTypes","func","isRequired","GifGridItem","title","url","src","alt","getGifts","category","a","encodeURI","fetch","response","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","max","image","key","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBADf,IADuB,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,OAMd,2BAAOO,UAAU,mBAAmBC,KAAK,OAAOC,MAAOV,EAAYW,SAfjD,SAACR,GACvBF,EAAcE,EAAES,OAAOF,YAmB/Bb,EAAYgB,UAAY,CACpBf,c,OAAegB,EAAUC,KAAKC,YC1B3B,IAAMC,EAAc,SAAC,GAAqB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAClC,OACI,yBAAKX,UAAU,gDACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cACX,4BAAQA,UAAU,iBACd,yBAAKY,IAAKD,EAAKE,IAAKH,MAG5B,yBAAKV,UAAU,gBACX,yBAAKA,UAAU,WACX,2BAAIU,Q,uBCbfI,EAAQ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACdL,EADc,iDACkCM,UAAUF,GAD5C,8DAEGG,MAAMP,GAFT,cAEdQ,EAFc,gBAGCA,EAASC,OAHV,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QATtB,kBAabW,GAba,4CAAH,sDCKRM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECFb,SAACA,GACzB,IADsC,EAEZxB,mBADL,CAAE8B,KAAM,GAAIQ,SAAS,IADJ,mBAE/BC,EAF+B,KAExBC,EAFwB,KAatC,OATAC,qBAAU,WACNlB,EAASC,GAAUkB,MAAM,SAAAP,GACrBK,EAAS,CACLV,KAAMK,EACNG,SAAS,SAGlB,CAACd,IAEGe,EDT2BI,CAAanB,GAAjCW,EAFuB,EAE7BL,KAAcQ,EAFe,EAEfA,QAEtB,OACI,yBAAK7B,UAAU,sBACT6B,GAAW,8BAAU7B,UAAU,+BAA+BmC,IAAI,OAAvD,OACd,wBAAInC,UAAU,YAAYe,GAC1B,yBAAKf,UAAU,WAEP0B,EAAOH,KAAI,SAACa,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAMX,IAAQW,UEsBrCE,G,YA9BM,WACjB,IADuB,EAEa/C,mBADf,CAAC,UADC,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACI,oCACI,6BAASU,UAAU,mBACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,SAAd,mBAMZ,6BAASA,UAAU,WACf,kBAAC,EAAD,CAAaV,cAAeA,IAC5B,6BACA,4BAEQS,EAAWwB,KAAI,SAACR,GAAD,OACX,kBAAC,EAAD,CAASsB,IAAKtB,EAAUA,SAAUA,Y,MCtB9DwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.75030273.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const initialState = '';\r\n    const [inputValue, setInputValue] = useState(initialState);\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {\r\n            setCategories( categories => [inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input className=\"input is-primary\" type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url} ) => {\r\n    return (\r\n        <div className=\"column is-4 animate__animated animate__pulse\">\r\n            <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                    <figure className=\"image is-4by3\">\r\n                        <img src={url} alt={title} />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <div className=\"content\">\r\n                        <p>{title}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifts = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=3&api_key=RYxKvg5tM8Mh6iNRSlkmjaB3XreyKtW8`;\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n }","import React from 'react'\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <div className=\"container is-fluid\">\r\n            { loading && <progress className=\"progress is-small is-primary\" max=\"100\">15%</progress> }\r\n           <h3 className=\"subtitle\">{category}</h3> \r\n           <div className=\"columns\">\r\n               {\r\n                   images.map((image) => (\r\n                    <GifGridItem key={image.id} {...image} />\r\n                   ))\r\n               }\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifts } from \"../helpers/getGifts\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const initialState = { data: [], loading: true };\r\n    const [state, setState] = useState(initialState)\r\n\r\n    useEffect(() => {\r\n        getGifts(category).then( images => {\r\n            setState({\r\n                data: images,\r\n                loading: false\r\n            });\r\n        });\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react';\r\n\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nimport 'bulma/css/bulma.min.css';\r\nimport 'animate.css'\r\n\r\nconst GifExpertApp = () => {\r\n    const initialState = ['Gantz']\r\n    const [categories, setCategories] = useState(initialState);\r\n\r\n    return (\r\n        <>\r\n            <section className=\"hero is-primary\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container\">\r\n                        <h1 className=\"title\">\r\n                            GifExpertApp\r\n                        </h1>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"section\">\r\n                <AddCategory setCategories={setCategories} />\r\n                <hr />\r\n                <ol>\r\n                    {\r\n                        categories.map((category) => (\r\n                            <GifGrid key={category} category={category} />\r\n                        ))   \r\n                    }\r\n                </ol>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}